{"version":3,"sources":["logo.svg","WalletCard.js","WalletCardEthers.js","App.js","reportWebVitals.js","index.js"],"names":["WalletCard","useState","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","userBalance","setUserBalance","setUserNft","connButtonText","setConnButtonText","accountChangedHandler","newAccount","getAccountBalance","toString","getAccountBalancNft","account","window","ethereum","request","method","params","then","balance","ethers","utils","formatEther","catch","error","message","axios","get","endpoint","outputb","result","data","on","location","reload","className","onClick","isMetaMask","console","log","WalletCardEthers","userBalanceInUSD","setUserBalanceInUSD","provider","setProvider","useEffect","getBalance","balanceResult","providers","Web3Provider","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39808981.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","// https://docs.metamask.io/guide/ethereum-provider.html#using-the-provider\n\nimport React, {useState} from 'react'\nimport {ethers} from 'ethers'\nimport axios from 'axios';\nimport './WalletCard.css'\n\nconst WalletCard = () => {\n\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [userBalance, setUserBalance] = useState(null);\n\tconst [UserNft, setUserNft] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\tconst endpoint = \"https://api-rinkeby.etherscan.io/api\";\n\tconst apikey = \"7NMKRJY2ZR3HAS4C2TJWJT4727S459RR6G\";\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\t\t\tconsole.log('MetaMask Here!');\n\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t\tgetAccountBalance(result[0]);\n\t\t\t\tgetAccountBalancNft(result[0]);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t\n\t\t\t});\n\n\t\t} else {\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\n\t// update account, will cause component re-render\n\tconst accountChangedHandler = (newAccount) => {\n\t\tsetDefaultAccount(newAccount);\n\t\tgetAccountBalance(newAccount.toString());\n\t\tgetAccountBalancNft(newAccount);\n\t}\n\n\tconst getAccountBalance = (account) => {\n\t\twindow.ethereum.request({method: 'eth_getBalance', params: [account, 'latest']})\n\t\t.then(balance => {\n\t\t\tsetUserBalance(ethers.utils.formatEther(balance));\n\t\t})\n\t\t.catch(error => {\n\t\t\tsetErrorMessage(error.message);\n\t\t});\n\t};\n\n\tconst getAccountBalancNft = (account) => {\n\t\taxios.get((endpoint + '?module=account&action=tokennfttx&contractaddress='+ account + '&page=1&offset=100&tag=latest&apikey=' + apikey)).then(outputb => {\n\t\t\tconst { result } = outputb.data\n            setUserNft(result);\n        })\n\t\t.catch(error => {\n\t\t\tsetErrorMessage(error.message);\n\t\t});\n\t};\n\n\tconst chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n\n\n\t// listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\n\t\n\treturn (\n\t\t<div className='walletCard'>\n\t\t<h4> {\"Connection to MetaMask using window.ethereum methods\"} </h4>\n\t\t\t<button onClick={connectWalletHandler}>{connButtonText}</button>\n\t\t\t<div className='accountDisplay'>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\t\t\t<div className='balanceDisplay'>\n\t\t\t\t<h3>Balance: {userBalance}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\t\t</div>\n\t);\n}\n\nexport default WalletCard;","import React, {useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport './WalletCard.css'\n\nconst WalletCardEthers = () => {\n\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [userBalance, setUserBalance] = useState(null);\n\tconst [userBalanceInUSD, setUserBalanceInUSD] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n\tconst [provider, setProvider] = useState(null);\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && defaultAccount == null) {\n\t\t\t// set ethers provider\n\t\t\tsetProvider(new ethers.providers.Web3Provider(window.ethereum));\n\n\t\t\t// connect to metamask\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t\tsetDefaultAccount(result[0]);\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t});\n\n\t\t} else if (!window.ethereum){\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\nuseEffect(() => {\n\tif(defaultAccount){\n\tprovider.getBalance(defaultAccount)\n\t.then(balanceResult => {\n\t\tsetUserBalance(ethers.utils.formatEther(balanceResult));\n\t\tsetUserBalanceInUSD(ethers.utils.formatEther(balanceResult));\n\t})\n\t};\n}, [defaultAccount]);\n\t\n\treturn (\n\t\t<div className='walletCard'>\n\t\t<h4> Connection to MetaMask using ethers.js </h4>\n\t\t\t<button onClick={connectWalletHandler}>{connButtonText}</button>\n\t\t\t<div className='accountDisplay'>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\t\t\t<div className='balanceDisplay'>\n\t\t\t\t<h3>Balance: {userBalance}</h3>\n\t\t\t</div>\n\t\t\t<div className='balanceDisplayInUSD'>\n\t\t\t\t<h3>BalanceinUSD: {userBalanceInUSD}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\t\t</div>\n\t);\n}\n\nexport default WalletCardEthers;","import logo from './logo.svg';\nimport './App.css';\nimport WalletCard from './WalletCard';\nimport WalletCardEthers from'./WalletCardEthers';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    <WalletCard/>\n    <WalletCardEthers/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}